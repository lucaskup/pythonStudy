from nose.tools import assert_equals
from nose.tools import timed
from node import *

def test_01():
    n1 = Node('Lucas')
    n2 = Node('Bib')
    n1.bind(10,n2)
    assert_equals(n1.edges[0].cost,10)
    assert_equals(n1.edges[0].node.value,'Bib')
    assert_equals(n2.edges[0].cost,10)
    assert_equals(n2.edges[0].node.value,'Lucas')
def test_02():
    n1 = Node('Lucas')
    n2 = Node('Bib')
    n3 = Node('Eduardo')
    n4 = Node('Lyn')
    n1.bind(100,n2)
    n2.bind(5,n3)
    n1.bind(666,n4)
    g = Graph()
    g.addNode(n1)
    g.addNode(n2)
    g.addNode(n3)
    g.addNode(n4)
    bfs = BFS(g)
    assert_equals(bfs.search('Lucas','Bib'),['Bib','Lucas'])

def test_03():
    n1 = Node('Lucas')
    n2 = Node('Bib')
    n3 = Node('Eduardo')
    n4 = Node('Lyn')
    n1.bind(100,n2)
    n2.bind(5,n3)
    n1.bind(666,n4)
    g = Graph()
    g.addNode(n1)
    g.addNode(n2)
    g.addNode(n3)
    g.addNode(n4)
    bfs = BFS(g)
    assert_equals(bfs.search('Bib','Lyn'),['Lyn','Lucas','Bib'])


def test_04():
    n1 = Node('Lucas')
    n2 = Node('Bib')
    n3 = Node('Eduardo')
    n4 = Node('Lyn')
    n5 = Node('Rayman')
    n6 = Node('Margit')
    n7 = Node('Tayran')
    n8 = Node('Tayza')
    n1.bind(100,n2)
    n2.bind(5,n3)
    n1.bind(666,n4)
    n5.bind(4,n1)
    n5.bind(40,n2)
    n5.bind(1,n6)
    n7.bind(20,n4)
    n8.bind(5,n4)
    n8.bind(5,n1)
    g = Graph()
    g.addNode(n1)
    g.addNode(n2)
    g.addNode(n3)
    g.addNode(n4)
    g.addNode(n5)
    g.addNode(n6)
    g.addNode(n7)
    g.addNode(n8)
    bfs = BFS(g)
    assert_equals(bfs.search('Tayza','Tayran'),['Tayran','Lyn','Tayza'])

def test_05():
    n1 = Node('Lucas')
    n2 = Node('Bib')
    n3 = Node('Eduardo')
    n4 = Node('Lyn')
    n5 = Node('Rayman')
    n6 = Node('Margit')
    n7 = Node('Tayran')
    n8 = Node('Tayza')
    n9 = Node('Puta')
    n1.bind(100,n2)
    n2.bind(5,n3)
    n1.bind(666,n4)
    n5.bind(4,n1)
    n5.bind(40,n2)
    n5.bind(1,n6)
    n7.bind(20,n4)
    n8.bind(5,n4)
    n8.bind(5,n1)
    n9.bind(1,n6)
    n9.bind(1,n3)
    n9.bind(1,n7)
    g = Graph()
    g.addNode(n1)
    g.addNode(n2)
    g.addNode(n3)
    g.addNode(n4)
    g.addNode(n5)
    g.addNode(n6)
    g.addNode(n7)
    g.addNode(n8)
    g.addNode(n9)
    bfs = BFS(g)
    assert_equals(bfs.search('Eduardo','Tayza'),['Tayza','Lucas','Bib','Eduardo'])
